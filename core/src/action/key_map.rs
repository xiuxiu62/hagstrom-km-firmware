use lazy_static::lazy_static;
use num_enum::{TryFromPrimitive, UnsafeFromPrimitive};
use std::collections::HashMap;

macro_rules! key_map {
    ($($key:expr => $val:expr),*) => {{
        let mut map = HashMap::new();
        $(map.insert($key, $val);)*

        map
    }};
}

lazy_static! {
    // (Press, Release)
    pub(crate) static ref KEY_MAP: HashMap<KeyCode, (u8, u8)> = key_map! {
        KeyCode::Tilde => (1, 129),
        KeyCode::One => (2, 130),
        KeyCode::Two => (3, 131),
        KeyCode::Three => (4, 132),
        KeyCode::Four => (5, 133),
        KeyCode::Five => (6, 134),
        KeyCode::Six => (7, 135),
        KeyCode::Seven => (8, 136),
        KeyCode::Eight => (9, 137),
        KeyCode::Nine => (10, 138),
        KeyCode::Zero => (11, 139),
        KeyCode::Dash => (12, 140),
        KeyCode::Equal => (13, 141),

        KeyCode::A => (31, 159),
        KeyCode::B => (50, 178),
        KeyCode::C => (48, 176),
        KeyCode::D => (33, 161),
        KeyCode::E => (19, 147),
        KeyCode::F => (34, 162),
        KeyCode::G => (35, 163),
        KeyCode::H => (36, 164),
        KeyCode::I => (24, 152),
        KeyCode::J => (37, 165),
        KeyCode::K => (38, 166),
        KeyCode::L => (39, 167),
        KeyCode::M => (52, 180),
        KeyCode::N => (51, 179),
        KeyCode::O => (25, 153),
        KeyCode::P => (26, 154),
        KeyCode::Q => (17, 145),
        KeyCode::R => (20, 148),
        KeyCode::S => (32, 160),
        KeyCode::T => (21, 149),
        KeyCode::U => (23, 151),
        KeyCode::V => (49, 177),
        KeyCode::W => (18, 146),
        KeyCode::X => (47, 175),
        KeyCode::Y => (22, 150),
        KeyCode::Z => (46, 174),

        KeyCode::Space => (61, 189),

        KeyCode::LBracket => (27, 155),
        KeyCode::RBracket => (28, 156),
        KeyCode::BackSlash => (29, 157),
        KeyCode::SemiColon => (40, 168),
        KeyCode::Quote => (41, 169),
        KeyCode::Comma => (53, 181),
        KeyCode::Period => (54, 182),
        KeyCode::ForwardSlash => (55, 183),
        KeyCode::BackSpace => (15, 143),
        KeyCode::Tab => (16, 144),
        KeyCode::Caps => (30, 158),
        KeyCode::Enter => (43, 171),
        KeyCode::Shift => (44, 172),
        KeyCode::Control => (58, 186),
        KeyCode::Alt => (60, 188),
        KeyCode::Super => (70, 198),
        KeyCode::Escape => (110, 238),
        KeyCode::Left => (79, 207),
        KeyCode::Up => (83, 211),
        KeyCode::Down => (84, 212),
        KeyCode::Right => (89, 217),

        KeyCode::F1 => (112, 240),
        KeyCode::F2 => (113, 241),
        KeyCode::F3 => (114, 242),
        KeyCode::F4 => (115, 243),
        KeyCode::F5 => (116, 244),
        KeyCode::F6 => (117, 245),
        KeyCode::F7 => (118, 246),
        KeyCode::F8 => (119, 247),
        KeyCode::F9 => (120, 248),
        KeyCode::F10 => (121, 249),
        KeyCode::F11 => (122, 250),
        KeyCode::F12 => (123, 251)
    };
}

#[repr(u8)]
#[derive(Hash, PartialEq, Eq, UnsafeFromPrimitive, TryFromPrimitive)]
pub enum KeyCode {
    Tilde,
    One,
    Two,
    Three,
    Four,
    Five,
    Six,
    Seven,
    Eight,
    Nine,
    Zero,
    Dash,
    Equal,

    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,

    Space,
    LBracket,
    RBracket,
    BackSlash,
    SemiColon,
    Quote,
    Comma,
    Period,
    ForwardSlash,
    BackSpace,
    Tab,
    Caps,
    Enter,
    Shift,
    Control,
    Alt,
    Super,
    Escape,
    Left,
    Up,
    Down,
    Right,

    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
}
